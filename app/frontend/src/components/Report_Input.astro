---
export const prerender = false;
import jwt from "jsonwebtoken";
let memberId = null;
let locationId = null;
let reports = [];

const token = Astro.cookies.get("living_fit_token")?.value;
if (token) {
	try {
		const decoded = jwt.verify(token, "skrt");
		memberId = decoded?.userId;
		// Fetch user data to get locationId
		if (memberId) {
			const userRes = await fetch(
				`http://localhost:3000/api/user/${memberId}`,
				{ credentials: "include" },
			);
			if (userRes.ok) {
				const userData = await userRes.json();
				locationId = userData.locationId;
				// Fetch user reports
				const reportsRes = await fetch(
					`http://localhost:3000/api/reports/member/${memberId}`,
					{ credentials: "include" },
				);
				if (reportsRes.ok) {
					reports = await reportsRes.json();
				}
			}
		}
	} catch (err) {
		console.error("JWT error:", err);
	}
}
let message = null;
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		const description = data.get("description");
		// Send POST request to backend API, including memberId and locationId
		const res = await fetch("http://localhost:3000/api/reports", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				issueDescription: description,
				memberId,
				locationId,
			}),
		});
		if (res.ok) {
			message = "Report submitted successfully.";
			// Refresh reports after successful submission
			if (memberId) {
				const reportsRes = await fetch(
					`http://localhost:3000/api/reports/member/${memberId}`,
					{ credentials: "include" },
				);
				if (reportsRes.ok) {
					reports = await reportsRes.json();
				}
			}
		} else {
			message = "Failed to submit report.";
		}
	} catch (error) {
		if (error instanceof Error) {
			message = error.message;
			console.error(error.message);
		}
	}
}

// Helper function to format date
function formatDate(dateString) {
	const date = new Date(dateString);
	return date.toLocaleDateString("en-US", {
		year: "numeric",
		month: "short",
		day: "numeric",
	});
}
---

<div class="flex flex-col lg:flex-row gap-6">
  <div class="lg:w-1/2">
    <form method="POST">
      <fieldset class="fieldset">
        <legend class="fieldset-legend">Report an issue</legend>
        <textarea class="textarea h-24 w-full" name="description" placeholder="Describe the issue"></textarea>
        <div class="label">Optional</div>
        <button class="btn btn-primary mt-2 w-full" type="submit">Submit</button>
      </fieldset>
      {message && <div class="mt-2 text-success">{message}</div>}
    </form>
  </div>

  <div class="lg:w-1/2">
    <div class="card bg-base-100 shadow">
      <div class="card-body">
        <h2 class="card-title">Your Previous Reports</h2>
        {reports.length > 0 ? (
          <div class="overflow-x-auto">
            <table class="table table-zebra">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Description</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {reports.map((report) => (
                  <tr>
                    <td>{formatDate(report.submissionDate)}</td>
                    <td class="max-w-[200px] truncate">{report.issueDescription}</td>
                    <td>
                      <div class={`badge ${
                        report.status === "open" ? "badge-warning" :
                        report.status === "in_progress" ? "badge-info" :
                        "badge-success"
                      }`}>
                        {report.status}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div class="text-center py-4 text-base-content/70">
            <p>No reports submitted yet</p>
          </div>
        )}
      </div>
    </div>
  </div>
</div>